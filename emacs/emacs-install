#! /bin/sh

# TODO: option to fail when missing but desired packages

set -e

basename=$(basename "$0")
defaultRelease=29.4

[ -n "$XDG_DOWNLOAD_DIR" ] || XDG_DOWNLOAD_DIR="$HOME/Downloads"
[ -d "$XDG_DOWNLOAD_DIR" ] || mkdir -p "$XDG_DOWNLOAD_DIR"

usage() {
	code=0
	[ $# -eq 0 ] || echo >&2 "$basename: $*" && code=2
	echo "USAGE: $basename [--deps] [--dry-run] [--gpg-if-available] [--help] [--release X.Y] [--tiny] [--with-gnu-tls-if-available] [--with-native-compilation] [--with-native-json] [--with-tree-sitter] [--with-x-toolkit athena|gtk|lucid]"
	exit $code
}

validate() { [ $# -ge 2 ] || usage "missing option argument: '$1'" ; }

while [ $# -ne 0 ] ; do
	case $1 in
		--deps)                                    deps=1                      ; shift   ;;
		--dry-run)                                 dry_run=1                   ; shift   ;;
		--gpg-if-available)                        gpg_if_available=1          ; shift   ;;
		--help)                    usage                                                 ;;
		--release)                 validate "$@" ; release=$2                  ; shift 2 ;;
		--tiny)                                    tiny=1                      ; shift   ;;
		#
		--with-gnu-tls-if-available)               with_gnu_tls_if_available=1 ; shift   ;;
		--with-native-compilation)                 with_native_compilation=1   ; shift   ;;
		--with-native-json)                        with_native_json=1          ; shift   ;;
		--with-tree-sitter)                        with_tree_sitter=1          ; shift   ;;
		--with-x-toolkit)          validate "$@" ; with_x_toolkit=$2           ; shift 2 ;;
		#
		*)                         usage "illegal argument: $1"                          ;;
	esac
done

# The OS affects installation location and libraries that need to be
# installed.
os=$(uname -s | tr A-Z a-z)
arch=$(uname -m)

# Linux has a few variants that change the packages one must install, and the
# command used to install those packages.
if [ "$os" = "linux" ] ; then
	# OS-specific compiled binaries
	if [ -r /etc/os-release ] ; then
		os=$(awk -F= < /etc/os-release '/ID|VERSION_ID/ {s=$2 ; if ("\"" == substr(s, 1, 1)) s = substr(s, 2) ; if ("\"" == substr(s, length(s))) s = substr(s, 1, length(s)-1) ; arr[$1] = s} END {printf("%s%s\n", arr["ID"], arr["VERSION_ID"])}' | cut -d. -f1)
	fi
fi

[ -n "$XDG_DATA_HOME" ] || XDG_DATA_HOME="$HOME/.local/share" # Application Data: /usr/share
config="--prefix=$XDG_DATA_HOME/${os}/${arch}"

# 50% speedup available on 30.1
# config="$config --disable-gc-mark-trace"

if [ -n "$tiny" ] ; then
	# Disables most library support, but still builds with X.
	config="$config --without-all"
else
	# Emacs' INSTALL documentation recommends to avoid starting a D-Bus
	# session bus when running Emacs as a daemon or via a remote ssh
	# connection.
	config="$config --without-dbus --without-gconf --without-gsettings --without-sound"
fi

# Specify base packages needed to build or run Emacs on each supported
# operating system.
case $os in
	darwin)          packages="$packages xz" ;;
	debian*|ubuntu*) packages="$packages texinfo" ;;
	fedora*|rhel*)   packages="$packages texinfo" ;;
	freebsd)         packages="$packages $(pkg rquery %dn emacs-devel)" ;;
	openbsd)         packages="$packages gmake" ;;
	*)               echo >&2 "WARNING: no base packages defined: $os" ;;
esac

if [ -n "$with_native_compilation" ] ; then
	# libgccjit: Library for embedding GCC inside programs and libraries
	case $os in
		debian*|ubuntu*) packages="$packages libgccjit0 libgccjit14-dev zlib1g zlib1g-dev" ;;
		fedora*|rhel*)   packages="$packages libgccjit libgccjit-devel zlib zlib-devel" ;;
		*)               echo >&2 "WARNING: no native-compilation packages defined: $os" ;;
	esac

	# Optionally perform native compilation of Emacs source lisp files after
	# Emacs itself is built.
	config="$config --with-native-compilation=aot --with-zlib"
else
	config="$config --with-native-compilation=no"
fi

if [ -n "$with_native_json" ] ; then
	# jansson: Small library for parsing and writing JSON documents.
	case $os in
		darwin)          packages="$packages jansson" ;;
		debian*|ubuntu*) packages="$packages libjansson4 libjansson-dev" ;;
		fedora*|rhel*)   packages="$packages jansson jansson-devel" ;;
		freebsd)         packages="$packages jansson" ;;
		openbsd)         packages="$packages jansson" ;;
		*)               echo >&2 "WARNING: no jansson packages defined: $os" ;;
	esac
	config="$config --with-json"
else
	config="$config --without-json"
fi

if [ -n "$with_tree_sitter" ] ; then
	# tree-sitter: Incremental parsing library for programming tools
	case $os in
		debian*|ubuntu*) packages="$packages libtree-sitter-dev libtree-sitter0" ;;
		fedora*|rhel*)   packages="$packages libtree-sitter libtree-sitter-devel" ;;
		*)               echo >&2 "WARNING: no tree-sitter packages defined: $os" ;;
	esac
	config="$config --with-tree-sitter"
else
	config="$config --without-tree-sitter"
fi

# gnutls: GNU Transport Layer Security Library
case $os in
	darwin)          packages="$packages gnutls-devel" ;;
	debian*|ubuntu*) packages="$packages libgnutls28-dev" ;;
	fedora*|rhel*)   packages="$packages gnutls gnutls-devel" ;;
	freebsd)         packages="$packages gnutls" ;;
	openbsd)         packages="$packages gnutls" ;;
	*)               echo >&2 "WARNING: no gnutls packages defined: $os" ;;
esac
if [ -n "$with_gnu_tls_if_available" ] ; then
	config="$config --with-gnutls=ifavailable"
fi

# ncurses: terminal independent library
case $os in
	darwin)          packages="$packages ncurses" ;;
	debian*|ubuntu*) packages="$packages libncurses-dev" ;;
	fedora*|rhel*)   packages="$packages ncurses ncurses-devel" ;;
	freebsd)         packages="$packages ncurses" ;;
	*)               echo >&2 "WARNING: no ncurses packages defined: $os" ;;
esac

# graphics
if [ -n "$with_x_toolkit" ] ; then
	# If using graphics, first specify libraries which are not related to
	# which graphics framework is to be used.
	case $os in
		darwin)          packages="$packages librsvg" ;;
		debian*|ubuntu*) packages="$packages libgif-dev libgif7 libharfbuzz-dev libjpeg-dev libpng-dev librsvg2-dev libtiff-dev libxft-dev libxft2 libxpm-dev zlib1g zlib1g-dev" ;;
		fedora*|rhel*)   packages="$packages giflib giflib-devel harfbuzz harfbuzz-devel libX11-devel libXft libXft-devel libXpm-devel libjpeg libjpeg-devel libpng-devel librsvg2 librsvg2-devel libtiff-devel openjpeg2-devel zlib zlib-devel" ;;
		openbsd)         : ;;
		*)               echo >&2 "WARNING: no graphics packages defined for: $os" ;;
	esac

	# Different graphics framework libraries have different package
	# requirements.
	case $with_x_toolkit in
		athena|lucid)
			case $os in
				debian*|ubuntu*) packages="$packages libxaw7 libxaw7-dev libxaw3dxft8 libxaw3dxft8-dev" ;;
				fedora*|rhel*)   packages="$packages libXaw libXaw-devel" ;;
				*)               echo >&2 "WARNING: no lucid packages defined for: $os" ;;
			esac
			;;
		gtk)
			case $os in
				fedora*|rhel*) packages="$packages gtk2 gtk2-devel" ;;
				*)             echo >&2 "WARNING: no gtk packages defined for: $os" ;;
			esac
			;;
		motif)
			# standard file system dialogs, but valid
			:
			;;
		*)
			echo >&2 "ERROR: graphics kit not recognized: $with_x_toolkit"
			exit 1
			;;
	esac

	config="$config --with-gif=ifavailable --with-jpeg=ifavailable --with-png=ifavailable --with-tiff=ifavailable --with-x-toolkit=$with_x_toolkit --with-zlib --without-toolkit-scroll-bars"
else
	config="$config --without-x"
	case $os in
		darwin) config="$config --without-ns" ;;
	esac
fi

packages=$(echo "$packages" | tr ' ' '\n' | sort -u | tr '\n' ' ')

if [ -n "$dry_run" ] ; then
	echo "CONFIGURE: $config"
	echo "PACKAGES:  $packages"
	exit 0
fi

# If dependency installation is requested, need to consider which graphical
# kit to configure and which OS running on.
if [ -n "$deps" ] && [ -n "$packages" ] ; then
	# Install build and runtime dependencies.
	echo "PACKAGES:  $packages"
	echo "Please type your password to install packages:"
	case $os in
		darwin)
			sudo port install $packages
			;;
		debian*|ubuntu*)
			sudo /usr/bin/apt-get install build-essential
			sudo /usr/bin/apt-get build-dep emacs
			sudo /usr/bin/apt-get install $packages
			;;
		fedora*|rhel*)
			sudo /usr/bin/dnf builddep emacs
			sudo /usr/bin/dnf install $packages
			;;
		freebsd)
			doas pkg install -y $packages
			;;
		openbsd)
			doas pkg_add install $packages
			;;
		*)
			echo >&2 "ERROR: no support for installing packages: $os"
			exit 1
			;;
	esac
fi

# Identify desired release version and download bundle.

if [ -z "$release" ] ; then
	printf "Which release? [%s] " "$defaultRelease"
	read -r release
	[ -n "$release" ] || release=$defaultRelease
fi

bundle=emacs-${release}.tar.xz
bundle_local=$XDG_DOWNLOAD_DIR/$bundle
if [ ! -f "$bundle_local" ] ; then
	echo "Downloading ${bundle}..."
	curl -L --create-dirs --output "$bundle_local" "http://ftp.gnu.org/gnu/emacs/$bundle"
fi

if which gpg >/dev/null 2>&1 ; then
	keyring=gnu-keyring.gpg
	keyring_local=$XDG_DOWNLOAD_DIR/$keyring
	if [ ! -f "$keyring_local" ] ; then
		echo "Downloading ${keyring}..."
		curl -L --create-dirs --output "$keyring_local" "https://ftp.gnu.org/gnu/$keyring"
		gpg --import "$keyring_local"
	fi

	sig=${bundle}.sig
	sig_local=$XDG_DOWNLOAD_DIR/$sig
	if [ ! -f "$sig_local" ] ; then
		echo "Downloading ${sig}..."
		curl -L --create-dirs --output "$sig_local" "http://ftp.gnu.org/gnu/emacs/$sig"
	fi

	while ! gpg --verify --keyring "$keyring_local" "$sig_local" "$bundle_local" ; do
		echo "WARNING: bundle file doesn't match its signature." >&2
		echo "bundle:    $bundle_local" >&2
		echo "signature: $sig_local" >&2
		printf "Remove bundle and signature, and retry? [Y/n] "
		read -r yn
		case $yn in
			N|n)
				echo "Exiting because bundle does not match signature."
				exit 1
				;;
			*)
				rm -fv "$sig_local" "$bundle_local"
				echo "Re-downloading ${bundle}..."
				curl -L --create-dirs --output "$bundle_local" "http://ftp.gnu.org/gnu/emacs/$bundle"
				echo "Re-downloading ${sig}..."
				curl -L --create-dirs --output "$sig_local" "http://ftp.gnu.org/gnu/emacs/$sig"
				;;
		esac
	done
	echo "Bundle file matches its signature"
else
	echo "WARNING: gpg program not found to verify bundle signature." >&2

	if [ -z "$gpg_if_available" ] ; then
		printf "Proceed anyway? [y/N] "
		read -r yn
		case $yn in
			Y|y) echo "Skipping bundle signature check..." ;;
			*)   echo "Exiting because cannot verify bundle integrity." ; exit 1 ;;
		esac
	fi
fi

################

BUILD_DIR=$(mktemp -d)
cleanup() {
	[ -z "$BUILD_DIR" ] || rm -fr "$BUILD_DIR"
}
# trap cleanup EXIT

echo >&2 "################ Extracting: $BUILD_DIR..."
echo >&2 "xz --decompress --stdout "$bundle_local" | tar -C "$BUILD_DIR" -f - -x"
xz --decompress --stdout "$bundle_local" | tar -C "$BUILD_DIR" -f - -x
cd "$BUILD_DIR/emacs-${release}"

echo >&2 "################ Configuring..."
echo >&2 "./configure $config"
./configure $config
code=$?
if [ "$code" -ne 0 ] ; then
	echo >&2 "ERROR: cannot configure: $code"
	exit $code
fi

echo >&2 "################ Compiling..."
make
code=$?
if [ "$code" -ne 0 ] ; then
	echo >&2 "ERROR: cannot compile: $code"
	exit $code
fi

# echo >&2 "################ Test this..."
# exit 0

echo >&2 "################ Installing..."
make install
code=$?
if [ "$code" -ne 0 ] ; then
	echo >&2 "ERROR: cannot install: $code"
	exit $code
fi

if [ "$os" = "darwin" ] ; then
	echo >&2 "################ Moving to /Applications..."
	sudo /bin/mv nextstep/Emacs.app /Applications
fi

case $os in
	darwin) sudo /usr/bin/codesign --force --deep --sign - /Applications/MacPorts/Emacs.app ;;
esac

echo >&2 "################ Installation successful."

echo >&2 "################ Deleting build directory."
cleanup
